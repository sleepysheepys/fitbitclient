package de.kopis.fitbit;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.text.StringStartsWith.startsWith;
import static org.junit.Assert.assertThat;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Properties;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.scribe.builder.ServiceBuilder;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Token;
import org.scribe.model.Verb;
import org.scribe.model.Verifier;
import org.scribe.oauth.OAuthService;

public class FitbitScribeTest {
	private static final String YOUR_API_KEY = "d5c41a13861742009238d0f97a33a5e7";
	private static final String YOUR_API_SECRET = "a3aa0e3c42af42638692613eeae26447";
	private static final Properties props = new Properties();
	private OAuthService service;

	@Test
	@Ignore
	public void authorize() throws IOException {
		Token requestToken = service.getRequestToken();
		String authUrl = service.getAuthorizationUrl(requestToken);
		assertThat(authUrl,
				startsWith("https://www.fitbit.com/oauth/authorize"));
		System.out.println("Open " + authUrl + " and enter PIN:");
		String pin = read();
		Token accessToken = service.getAccessToken(requestToken, new Verifier(
				pin));
		save(accessToken);
		assertThat(props.getProperty("access_token"), is(not(nullValue())));
	}

	@Test
	public void getProfile() throws IOException {
		Token accessToken = load();
		OAuthRequest request = new OAuthRequest(Verb.GET,
				"http://api.fitbit.com/1/user/-/profile.json");
		service.signRequest(accessToken, request);
		Response response = request.send();
		assertThat(response.getBody(), startsWith("{\"user\":{"));
	}

	@Before
	public void setUp() {
		service = new ServiceBuilder().provider(FitbitApi.class)
				.apiKey(YOUR_API_KEY).apiSecret(YOUR_API_SECRET).build();
	}

	private void save(Token accessToken) throws IOException {
		props.setProperty("access_token", accessToken.getToken());
		props.setProperty("access_token_secret", accessToken.getSecret());
		props.store(new FileWriter("fitbit.properties"),
				"DO NOT EDIT THIS FILE");
	}

	private Token load() throws FileNotFoundException, IOException {
		props.load(new FileReader("fitbit.properties"));
		return new Token(props.getProperty("access_token"),
				props.getProperty("access_token_secret"));
	}

	private String read() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String line = br.readLine();
		br.close();
		return line;
	}
}
